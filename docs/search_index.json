[["index.html", "United States Covid Project Chapter 1 Introduction", " United States Covid Project Ruize Yu, Jiazhen Li, Wenxin Zhang 2021-12-12 Chapter 1 Introduction "],["data-sources.html", "Chapter 2 Data sources 2.1 Vaccination data", " Chapter 2 Data sources In this project, we have three data sources 2.1 Vaccination data We collected vaccination data from an organization called ‘Our World in Data’. They gather vaccination information of United States from official and update the data in a daily basis. The daily cases and death data are gathered from Center for Systems Science and Engineering at John Hopkins University. It’s updated every 24 hours as well. For the vaccination data, there are 14 features. The names of them are listed below: ## [1] &quot;date&quot; &quot;location&quot; ## [3] &quot;total_vaccinations&quot; &quot;total_distributed&quot; ## [5] &quot;people_vaccinated&quot; &quot;people_fully_vaccinated_per_hundred&quot; ## [7] &quot;total_vaccinations_per_hundred&quot; &quot;people_fully_vaccinated&quot; ## [9] &quot;people_vaccinated_per_hundred&quot; &quot;distributed_per_hundred&quot; ## [11] &quot;daily_vaccinations_raw&quot; &quot;daily_vaccinations&quot; ## [13] &quot;daily_vaccinations_per_million&quot; &quot;share_doses_used&quot; The starting date of this dataset is 2021-01-12 and the last day is yesterday. The first problem we noticed was that in location, there are many places that are not US states. Like “Bureau of Prisons”,“Dept of Defense”… Therefore, the first step that we did was to filter out these none-states. Then we found a common issue, missing data. We visualized it in missing values chapter and decided to do a backward filling. Because most of these missing values were not continuous, we could simply use the latest values to fill in these missing spots. For the cases and death data, the raw data put every day as a column therefore we first converted these columns to rows. ## [1] &quot;UID&quot; &quot;iso2&quot; &quot;iso3&quot; &quot;code3&quot; &quot;FIPS&quot; ## [6] &quot;Admin2&quot; &quot;Province_State&quot; &quot;Country_Region&quot; &quot;Lat&quot; &quot;Long_&quot; ## [11] &quot;Combined_Key&quot; &quot;1/22/20&quot; &quot;1/23/20&quot; &quot;1/24/20&quot; &quot;1/25/20&quot; The starting date of this dataset is 2020-01-22 and the last day is yesterday. When we tried to calculate daily growing cases and death from cummulative data, we noticed that there were mistakes when collecting these data because some of the growing numbers were negative. We used the same filling method as in vaccination data. "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Vaccination, case, and death data", " Chapter 3 Data transformation 3.1 Vaccination, case, and death data The code is in data/data_preprocessing.R For this part, there are 3 datasets: vaccination, cases, and death. Cases and death are from same source, vaccination is from another source. Vaccination: 1. Filter out non-state, only keep 50 states. 2. Fill NA with previous value. 3. Rename ‘location’ to ‘state’ for later join with other dataframe. Change ‘New York State’ to ‘New York’ to be consistent with other data source. 4. When calculating growth, fill first date with 0 otherwise it would be NA. Dataframe after transformation: ## # A tibble: 6 x 16 ## # Groups: state [1] ## date state total_vaccinatio~ total_distributed people_vaccinat~ people_fully_vaccinate~ ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2021-01-13 Alaba~ 84040 378975 74792 0.19 ## 2 2021-01-14 Alaba~ 92300 435350 80480 0.19 ## 3 2021-01-15 Alaba~ 100567 444650 86956 0.28 ## 4 2021-01-16 Alaba~ 100567 444650 86956 0.28 ## 5 2021-01-17 Alaba~ 100567 444650 86956 0.28 ## 6 2021-01-18 Alaba~ 100567 444650 86956 0.28 ## # ... with 10 more variables: total_vaccinations_per_hundred &lt;dbl&gt;, ## # people_fully_vaccinated &lt;dbl&gt;, people_vaccinated_per_hundred &lt;dbl&gt;, ## # distributed_per_hundred &lt;dbl&gt;, daily_vaccinations_raw &lt;dbl&gt;, daily_vaccinations &lt;dbl&gt;, ## # daily_vaccinations_per_million &lt;dbl&gt;, share_doses_used &lt;dbl&gt;, vacc_diff &lt;dbl&gt;, ## # fully_vacc_diff &lt;dbl&gt; Case and death: 1. Filter out non-state, only keep 50 states. 2. Convert date columns to rows by using dplyr. 3. Change date from character type to date type. 4. Rename ‘Province_state’ to ‘state’ for later join with other dataframe. 5. When calculating growth, fill first date with 0 otherwise it would be NA. Change all negative values to NA, then fill with previous value. There shouldn’t have negative values in growth because cumulative covid cases and deaths shouldn’t decrease as time goes by. Dataframes after transformation: ## # A tibble: 6 x 4 ## # Groups: state [1] ## state date cases case_diff ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alabama 2020-01-22 0 0 ## 2 Alabama 2020-01-23 0 0 ## 3 Alabama 2020-01-24 0 0 ## 4 Alabama 2020-01-25 0 0 ## 5 Alabama 2020-01-26 0 0 ## 6 Alabama 2020-01-27 0 0 ## # A tibble: 6 x 4 ## # Groups: state [1] ## state date death death_diff ## &lt;chr&gt; &lt;date&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Alabama 2020-01-22 0 0 ## 2 Alabama 2020-01-23 0 0 ## 3 Alabama 2020-01-24 0 0 ## 4 Alabama 2020-01-25 0 0 ## 5 Alabama 2020-01-26 0 0 ## 6 Alabama 2020-01-27 0 0 "],["missing-values.html", "Chapter 4 Missing values 4.1 Dataframe after data cleaning 4.2 Missing value counts by column 4.3 Missing value counts by row 4.4 Heatmap", " Chapter 4 Missing values We will use US vaccination data as an example to show how we are going to show missing data pattern. 4.1 Dataframe after data cleaning ## # A tibble: 6 x 14 ## date location total_vaccinatio~ total_distribut~ people_vaccinat~ people_fully_vaccin~ ## &lt;date&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 2020-12-20 United St~ 556208 NA NA NA ## 2 2020-12-21 United St~ 614117 NA NA NA ## 3 2020-12-22 United St~ NA NA NA NA ## 4 2020-12-23 United St~ 1008025 NA NA NA ## 5 2020-12-24 United St~ NA NA NA NA ## 6 2020-12-25 United St~ NA NA NA NA ## # ... with 8 more variables: total_vaccinations_per_hundred &lt;dbl&gt;, ## # people_fully_vaccinated &lt;dbl&gt;, people_vaccinated_per_hundred &lt;dbl&gt;, ## # distributed_per_hundred &lt;dbl&gt;, daily_vaccinations_raw &lt;dbl&gt;, daily_vaccinations &lt;dbl&gt;, ## # daily_vaccinations_per_million &lt;dbl&gt;, share_doses_used &lt;dbl&gt; The original dataframe contain vaccination information of all states and some organizations of United States. We extracted whole country data and we can see that each row represents a day from 2020-12-20 to now. The information is updated everyday. There are lots of missing values in the table and we are going to use different methods to visualize it. 4.2 Missing value counts by column ## num_missing ## daily_vaccinations_raw 50 ## people_fully_vaccinated_per_hundred 45 ## people_fully_vaccinated 45 ## total_distributed 44 ## people_vaccinated 44 ## people_vaccinated_per_hundred 44 ## distributed_per_hundred 44 ## share_doses_used 44 ## total_vaccinations 31 ## total_vaccinations_per_hundred 31 ## daily_vaccinations 1 ## daily_vaccinations_per_million 1 ## date 0 ## location 0 This is the missing value counts by different features. According to this table, we can see that the feature “daily_vaccinations_raw” has the largest number of missing values. And for some features, they have similar number of missing values. Such as “people_fully_vaccinated_per_hundred” and “people_fully_vaccinated”, both of them have number of missing values equal to 35, also, according the the features’ names, it can be guessed that there is a correlation between this two value, which may be the number of missing value in “people_fully_vaccinated_per_hundred” is dependent on the feature “people_fully_vaccinated”, so they always have the missing value at the same time. 4.3 Missing value counts by row ## # A tibble: 9 x 2 ## date num_missing ## * &lt;chr&gt; &lt;dbl&gt; ## 1 2020-12 109 ## 2 2021-01 125 ## 3 2021-02 11 ## 4 2021-05 10 ## 5 2021-06 1 ## 6 2021-07 11 ## 7 2021-09 32 ## 8 2021-10 42 ## 9 2021-11 83 Each row in the original dataframe represents a specific day. However, there are too many rows that have missing values. Therefore, we count missing values by month. December 2020 and January 2021 have the greatest number of missing values. This is reasonable as vaccination just started and it’s hard to get all data well-organized. 4.4 Heatmap In order to see the missing patterns we have for this dataframe, we can use heatmap. It can be observed that rows that have missing values all at once by using this heatmap. However, since there are 330 rows in the us_whole_vaccination dataframe, it is hard to summarize the missing value patterns without showing the whole graph. Moreover, as looking through the graph, several rows have the similar missing value patterns. So instead of showing the heatmap for each row, plot just show the different missing value patterns for the dataset is prefered. This missing value plot is a combination of all the information above. It consists of three plots. The main plot is the heatmap on the bottom left. It summarized different missing value patterns among all rows. The blue block in each column represents there are missing values in this column. According to the main plot, it shows that there are 7 different patterns for us_whole_vaccination dataset, which are represented by each row of the heatmap. The first row in the heatmap represents the complete cases, which means there is no missing value for rows in this pattern. By looking through this plot, there is a correlation between some features as mentioned in 4.2. For example, for features “people_fully_vaccinated_per_hundred” and “people_fully_vaccinated”, in each pattern, their missing value always occurred in the same time. Similar for features “total_distributed, people_vaccinated, people_vaccinated_per_hundred, distributed_per_hundred, and share_doses_used”, “daily_vaccinations and daily_vaccinations_per_million”, and “total_vaccinations and total_vaccinations_per_hundred”. It indicates that for some of these features, it maybe reasonable to only keep one feature from each group. For example, keep “people_fully_vaccinated” and remove “people_fully_vaccinated_per_hundred”. The barplot on the right is the row count plot. It tells us the number of rows that each pattern can apply. It shows that the complete cases pattern has the most largest number of rows. From this plot, it shows that pattern 2 has the largest number of rows with missing data. By checking with this pattern, it contains 10 features that are missing. A reasonable guess is that the most of data for this pattern comes from December 2020 and January 2021. Crossing checking with the heatmap for each row in 4.4, this guess is confirmed. The barplot on the top is a visualization of 4.2. It shows how many rows contain missing values of different features. As there are not many missing rows, we might remove missing patter 2, 4, 5, and 7 as over 50% of the features are missing. For pattern 3 and 6, we can use mean or median to fill the missing values. "],["results.html", "Chapter 5 Results 5.1 US time series 5.2 US cumulative cases 5.3 Latest cummulative cases and deaths 5.4 Latest vaccination situation 5.5 Time series of serious states 5.6 Distribution", " Chapter 5 Results 5.1 US time series This graph shows the time series of confirmed cases growth and people vaccinated growth. It’s obvious that when people vaccinated growth number is high, confirmed cases growth speed decreases and when people vaccinated low, confirmed cases increases again. This plot confirms that vaccination helps to prevent covid spread. 5.2 US cumulative cases This is a map that shows cumulative confirmed cases in United States on 12/9/2021. Red points mean confirmed cases and the size represents exact number. The higher the number, the larger the spot. We can see that large cities are serious spots. This graph gives us a general view of current covid situation. 5.3 Latest cummulative cases and deaths The graphs above shows current confirmed cases and death of 50 states. We can see that California, Texas, Florida, New York, and Illinois are top 5 states with most confirmed cases. California, Texas, Florida, New York, and Pennsylvania are top 5 states with most deaths. 5.4 Latest vaccination situation As there are 12 features in our vaccination data, we use a correlation heatmap to select the most relevant features to confirmed cases and deaths. From the graph above we can see the top 4 features are total vaccinations, total distributed, people vaccinated, and people fully vaccinated. We will use people vaccinated and people fully vaccinated as two features to represent vaccination. The 5 states with most deaths also have the largest number of people vaccinated. However, none of them are on top of the list of people fully vaccinated. 5.5 Time series of serious states There is a significant outlier in original people_vaccinated daily growth graph. Because from October 2nd to November 28th, the people_vaccinated information in Pennsylvania is missing. We are doing a filling by pervious data, therefore there exists a huge pike. We have to delete the data of that day. 5.6 Distribution "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion "]]
